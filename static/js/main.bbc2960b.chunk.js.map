{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/NewTodo.js","components/Footer.js","App.js","index.js"],"names":["Todo","state","currentValue","isEditing","textInput","React","createRef","startEdit","setState","props","text","current","focus","handleChange","event","target","value","trim","length","handleKeyPress","id","key","onTextChanged","blurHandler","this","done","toggleItem","onDelete","onDoubleClick","className","cn","completed","editing","type","checked","onChange","htmlFor","onClick","onKeyUp","onBlur","ref","Component","TodoList","todos","map","todo","NewTodo","newItemText","handleAddItem","preventDefault","addItem","onSubmit","placeholder","Footer","clickHandler","clearCompleted","filterSelected","activeTodos","filter","e","href","selected","name","some","PureComponent","App","checkedAll","checkAll","newItem","uuid","handleDelete","currentTodo","newTodos","every","changeText","todosFilter","localStorage","getItem","todoItems","JSON","parse","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbc2960b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport class Todo extends React.Component {\n  state = {\n    currentValue: '',\n    isEditing: false,\n  }\n\n  textInput = React.createRef();\n\n  startEdit = () => {\n    this.setState({\n      isEditing: true,\n      currentValue: this.props.text,\n    }, () => {\n      this.textInput.current.focus();\n    });\n  }\n\n  handleChange = (event) => {\n    if (event.target.value.trim().length !== 0) {\n      this.setState({\n        currentValue: event.target.value,\n      });\n    } else {\n      this.setState({\n        currentValue: event.target.value.trim(),\n      });\n    }\n  }\n\n  handleKeyPress = (event, id) => {\n    if (event.key === 'Enter') {\n      const { currentValue } = this.state;\n      const { onTextChanged } = this.props;\n\n      onTextChanged(id, currentValue);\n\n      this.setState({\n        currentValue: '',\n        isEditing: false,\n      });\n    } else if (event.key === 'Escape') {\n      this.setState({\n        currentValue: '',\n        isEditing: false,\n      });\n    }\n  }\n\n  blurHandler = (id) => {\n    this.props.onTextChanged(id, this.state.currentValue);\n\n    this.setState({\n      currentValue: '',\n      isEditing: false,\n    });\n  }\n\n  render() {\n    const { isEditing, currentValue } = this.state;\n    const { id, done, text, toggleItem, onDelete } = this.props;\n\n    return (\n      <li\n        onDoubleClick={this.startEdit}\n        className={cn({\n          completed: done,\n          editing: isEditing,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${id}`}\n            checked={done}\n            onChange={() => toggleItem(id)}\n          />\n          <label htmlFor={`todo-${id}`}>{text}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => onDelete(id)}\n          />\n        </div>\n        {isEditing && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={currentValue}\n            onChange={this.handleChange}\n            onKeyUp={event => this.handleKeyPress(event, id)}\n            onBlur={() => this.blurHandler(id)}\n            ref={this.textInput}\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  id: PropTypes.string.isRequired,\n  done: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n  toggleItem: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onTextChanged: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { arrayOf } from 'prop-types';\nimport { Todo } from './Todo';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    toggleItem,\n    onDelete,\n    onTextChanged,\n  } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <Todo\n          key={todo.id}\n          id={todo.id}\n          text={todo.text}\n          done={todo.done}\n          toggleItem={toggleItem}\n          onDelete={onDelete}\n          onTextChanged={onTextChanged}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    done: PropTypes.bool,\n    text: PropTypes.string,\n  })).isRequired,\n  toggleItem: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onTextChanged: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class NewTodo extends React.Component {\n  state = {\n    newItemText: '',\n  }\n\n  handleAddItem = (event) => {\n    event.preventDefault();\n\n    const { addItem } = this.props;\n    const { newItemText } = this.state;\n\n    addItem(newItemText);\n\n    this.setState({\n      newItemText: '',\n    });\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      newItemText: target.value,\n    });\n  }\n\n  render() {\n    const { newItemText } = this.state;\n\n    return (\n      <form onSubmit={this.handleAddItem}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={newItemText}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addItem: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { arrayOf } from 'prop-types';\nimport cn from 'classnames';\n\nexport class Footer extends React.PureComponent {\n  render() {\n    const {\n      todos,\n      clickHandler,\n      clearCompleted,\n      filterSelected,\n    } = this.props;\n\n    const activeTodos = todos.filter(todo => !todo.done);\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${activeTodos.length} items left`}\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <a\n              onClick={e => clickHandler(e)}\n              href=\"#/\"\n              className={cn({ selected: filterSelected === 'all' })}\n              name=\"all\"\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              className={cn({ selected: filterSelected === 'active' })}\n              onClick={e => clickHandler(e)}\n              href=\"#/active\"\n              name=\"active\"\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              className={cn({ selected: filterSelected === 'completed' })}\n              onClick={e => clickHandler(e)}\n              href=\"#/completed\"\n              name=\"completed\"\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n        {todos.some(todo => todo.done === true)\n          && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => clearCompleted()}\n            >\n              Clear completed\n            </button>\n          )}\n      </footer>\n    );\n  }\n}\n\nFooter.propTypes = {\n  todos: arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    done: PropTypes.bool,\n    text: PropTypes.string,\n  })).isRequired,\n  clickHandler: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  filterSelected: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport uuid from 'react-uuid';\nimport { TodoList } from './components/TodoList';\nimport { NewTodo } from './components/NewTodo';\nimport { Footer } from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    checkedAll: false,\n    filterSelected: 'all',\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('todos') !== null) {\n      const todoItems = JSON.parse(localStorage.getItem('todos'));\n\n      this.setState(todoItems);\n    }\n  }\n\n  componentDidUpdate() {\n    const { todos } = this.state;\n\n    localStorage.setItem('todos', JSON.stringify({ todos }));\n  }\n\n  checkAll = ({ target }) => {\n    this.setState(({ todos, checkedAll }) => {\n      const newTodos = todos.map(todo => ({\n        ...todo,\n        done: target.checked,\n      }));\n\n      return {\n        todos: newTodos,\n        checkedAll: !checkedAll,\n      };\n    });\n  }\n\n  addItem = (text) => {\n    if (text.trim() === '') {\n      return;\n    }\n\n    this.setState(({ todos }) => {\n      const newItem = {\n        id: uuid(),\n        done: false,\n        text,\n      };\n\n      return {\n        todos: [...todos, newItem],\n        checkedAll: false,\n      };\n    });\n  }\n\n  clickHandler = (event) => {\n    const filterSelected = event.target.name;\n\n    this.setState({\n      filterSelected,\n    });\n  };\n\n  clearCompleted = () => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => !todo.done),\n      checkedAll: false,\n    }));\n  };\n\n  handleDelete = (id) => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(currentTodo => currentTodo.id !== id),\n    }));\n  };\n\n  toggleItem = (id) => {\n    this.setState(({ todos }) => {\n      const newTodos = todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            done: !todo.done,\n          };\n        }\n\n        return todo;\n      });\n\n      const checkedAll = newTodos.every(todo => todo.done === true);\n\n      return {\n        todos: newTodos,\n        checkedAll,\n      };\n    });\n  }\n\n  changeText = (id, text) => {\n    this.setState(({ todos }) => {\n      const newItems = todos.map((todo) => {\n        if (todo.id === id && text !== '') {\n          return {\n            ...todo,\n            text,\n          };\n        }\n\n        if (todo.id === id && text === '') {\n          this.setState(() => ({\n            todos: todos.filter(currentTodo => currentTodo.id !== id),\n          }));\n        }\n\n        return todo;\n      });\n\n      return {\n        todos: newItems,\n      };\n    });\n  };\n\n  todosFilter = (todos, filterSelected) => {\n    switch (filterSelected) {\n      case 'completed':\n        return todos.filter(todo => todo.done);\n      case 'active':\n        return todos.filter(todo => !todo.done);\n      default:\n        return todos;\n    }\n  };\n\n  render() {\n    const {\n      todos,\n      checkedAll,\n      filterSelected,\n    } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n        </header>\n        <NewTodo addItem={this.addItem} />\n        <section className=\"main\">\n          {todos.length\n            ? (\n              <>\n                <input\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  checked={checkedAll}\n                  className=\"toggle-all\"\n                  onChange={this.checkAll}\n                />\n                <label htmlFor=\"toggle-all\">\n                  Mark all as complete\n                </label>\n              </>\n            )\n            : null}\n          <TodoList\n            todos={this.todosFilter(todos, filterSelected)}\n            onDelete={this.handleDelete}\n            toggleItem={this.toggleItem}\n            onTextChanged={this.changeText}\n          />\n        </section>\n\n        {todos.length\n          ? (\n            <Footer\n              todos={todos}\n              clickHandler={this.clickHandler}\n              clearCompleted={this.clearCompleted}\n              filterSelected={filterSelected}\n            />\n\n          ) : null}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}